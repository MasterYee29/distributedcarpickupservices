/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.xmumcarpick;
import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;

import java.sql.*;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;


/**
 *
 * @author Francis
 */
public class CarPickDriver extends javax.swing.JFrame {

    /**
     * Creates new form CarPickClient
     */
    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;
    DefaultTableModel model = new DefaultTableModel();
    XMUMCarPick OOP = new XMUMCarPick();
    String username, address = "localhost";
    ArrayList<String> userss = new ArrayList();
    
   
    
    
    Boolean isConnected = false;
    Socket theSocket;
    BufferedReader theReader;
    PrintWriter theWriter;
    
    public void ListenThread(){
        Thread IncomingReader = new Thread(new typeArea());
        IncomingReader.start();
    }
    
    public void userAdd(String data){
        userss.add(data);
    }
    
    public void userRemove(String data){
        showArea.append(data + " is now offline! \n");
    }
    
    public void writeUsers(){
        String[] tempList = new String[(userss.size())];
        userss.toArray(tempList);
        for(String token : tempList){
            
        }
    }
    
    public void sendDisconnect(){
        String bye = (username + ": :Disconnect");
        try{
            theWriter.println(bye);
            theWriter.flush();
            
        }catch(Exception ex){
            showArea.append("You're not connected!");
        }
    }
    
    public void Disconnect(){
        try{
            showArea.append("Disconnected... \n");
            theSocket.close();
        }catch(Exception ex){
            
        }
        isConnected = false;
        clientname.setEditable(true);
    }
    
    public CarPickDriver() {
        
        initComponents();
        completeOrder.setEnabled(false);
        Object col[] = {"Name", "Origin","Destination","Pax","Time","Date"};
        model.setColumnIdentifiers(col);
        jTable1.setModel(model);
        con = CarPickDriver.ConnectDB();
        
        updateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        clientname = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        showArea = new javax.swing.JTextArea();
        connect = new javax.swing.JButton();
        disconnect = new javax.swing.JButton();
        typeArea = new javax.swing.JTextField();
        send = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        takeOrder = new javax.swing.JButton();
        update = new javax.swing.JButton();
        refresh = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        distanceArea = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        paxArea = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        carSeatArea = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        timeArea = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        priceArea = new javax.swing.JTextField();
        calculate = new javax.swing.JButton();
        completeOrder = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        exit = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(17, 76, 195));
        setForeground(new java.awt.Color(203, 75, 75));

        jPanel1.setBackground(new java.awt.Color(126, 193, 245));
        jPanel1.setBorder(new javax.swing.border.MatteBorder(null));

        clientname.setText("Your Name");
        clientname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clientnameActionPerformed(evt);
            }
        });
        clientname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                clientnameKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                clientnameKeyTyped(evt);
            }
        });

        showArea.setColumns(20);
        showArea.setRows(5);
        jScrollPane1.setViewportView(showArea);

        connect.setBackground(new java.awt.Color(0, 204, 102));
        connect.setBorder(null);
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });

        disconnect.setBackground(new java.awt.Color(255, 51, 51));
        disconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectActionPerformed(evt);
            }
        });

        typeArea.setText("Type your message here...");
        typeArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeAreaActionPerformed(evt);
            }
        });
        typeArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                typeAreaKeyReleased(evt);
            }
        });

        send.setBackground(new java.awt.Color(51, 102, 255));
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(typeArea)
                        .addGap(18, 18, 18)
                        .addComponent(send, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(clientname, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(connect, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(disconnect, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(70, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(clientname, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(connect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(disconnect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(send, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(typeArea, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                .addGap(98, 98, 98))
        );

        jPanel2.setBackground(new java.awt.Color(41, 142, 230));
        jPanel2.setBorder(new javax.swing.border.MatteBorder(null));

        jTable1.setBorder(new javax.swing.border.MatteBorder(null));
        jTable1.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        jTable1.setForeground(new java.awt.Color(0, 0, 0));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Origin", "Destination", "Pax", "Date", "Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);

        takeOrder.setBackground(new java.awt.Color(255, 255, 255));
        takeOrder.setFont(new java.awt.Font("Monospaced", 3, 12)); // NOI18N
        takeOrder.setForeground(new java.awt.Color(51, 153, 255));
        takeOrder.setText("TAKE ORDER");
        takeOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                takeOrderMouseReleased(evt);
            }
        });
        takeOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                takeOrderActionPerformed(evt);
            }
        });
        takeOrder.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                takeOrderKeyReleased(evt);
            }
        });

        update.setBackground(new java.awt.Color(255, 255, 255));
        update.setFont(new java.awt.Font("Monospaced", 3, 12)); // NOI18N
        update.setForeground(new java.awt.Color(51, 153, 255));
        update.setText("UPDATE TABLE");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        refresh.setBackground(new java.awt.Color(255, 255, 255));
        refresh.setFont(new java.awt.Font("Monospaced", 3, 12)); // NOI18N
        refresh.setForeground(new java.awt.Color(51, 153, 255));
        refresh.setText("RESET COLUMNS");
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel2.setText("Distance");

        distanceArea.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel3.setText("Pax");

        paxArea.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel4.setText("Car Seats (4 or 6)");

        carSeatArea.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel5.setText("Depart Time");

        timeArea.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel6.setText("Price");

        priceArea.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N

        calculate.setBackground(new java.awt.Color(255, 255, 255));
        calculate.setFont(new java.awt.Font("Monospaced", 3, 12)); // NOI18N
        calculate.setForeground(new java.awt.Color(51, 153, 255));
        calculate.setText("CALCULATE");
        calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateActionPerformed(evt);
            }
        });

        completeOrder.setBackground(new java.awt.Color(255, 255, 255));
        completeOrder.setFont(new java.awt.Font("Monospaced", 3, 12)); // NOI18N
        completeOrder.setForeground(new java.awt.Color(51, 153, 255));
        completeOrder.setText("COMPLETE ORDER");
        completeOrder.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                completeOrderMouseReleased(evt);
            }
        });
        completeOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(calculate)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel6)))
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(paxArea)
                            .addComponent(distanceArea)
                            .addComponent(priceArea, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                            .addComponent(timeArea)
                            .addComponent(carSeatArea)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 522, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(takeOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(completeOrder)))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(distanceArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(paxArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(carSeatArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(timeArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priceArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(calculate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(takeOrder)
                    .addComponent(update)
                    .addComponent(refresh)
                    .addComponent(completeOrder))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 368, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        jPanel3.setBackground(new java.awt.Color(49, 75, 255));
        jPanel3.setBorder(new javax.swing.border.MatteBorder(null));

        jLabel1.setFont(new java.awt.Font("Monospaced", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("XMUMCarPick");

        exit.setBackground(new java.awt.Color(255, 0, 0));
        exit.setFont(new java.awt.Font("Monospaced", 1, 12)); // NOI18N
        exit.setForeground(new java.awt.Color(0, 0, 0));
        exit.setText("LOGOUT");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jButton1.setText("Driver");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exit)
                .addGap(20, 20, 20))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(exit)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public static Connection ConnectDB(){
    try{
        Class.forName("org.sqlite.JDBC");
        Connection con = DriverManager.getConnection("jdbc:sqlite:dataform.db");
        return con;
    }catch(Exception ex){
        JOptionPane.showMessageDialog(null, ex);
        return null;
    }
}

public synchronized double distanceCal(double distance){
    
    return distance * 7;
    
}

public synchronized double paxCal(double px){
    
    return px * 1.2;
    
}

public synchronized double carSeatCal(double carSt){
    
    return carSt * 0.5;
    
}

public synchronized double timeCal(double ti){
    if(ti >= 2000){
        return 3;
    }
    else{
        return 1.5;
    }
    
}
    
public void updateTable(){
    con = CarPickDriver.ConnectDB();
    
    
    if(con!=null){
        String sql = "SELECT Name, Origin, Destination, Pax, Time, Date FROM dataform";
        
        try{
            pst = con.prepareStatement(sql);
            rs = pst.executeQuery();
            Object[] columnData = new Object[6];
            
            while(rs.next()){
                columnData[0] = rs.getString("Name");
                columnData[1] = rs.getString("Origin");
                columnData[2] = rs.getString("Destination");
                columnData[3] = rs.getString("Pax");
                columnData[4] = rs.getString("Time");
                columnData[5] = rs.getString("Date");
                model.addRow(columnData);
            }
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, ex);
            
        }
    }
}
    
    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
        // TODO add your handling code here:
        switch(clientname.getText()){
            case "":
                clientname.setText("Input your name! \n");
                break;
            case "Your Name":
                clientname.setText("Input your name! \n");
                break;
            case "Input your name!":
                break;
            default:
                if(isConnected == false){
                    username = clientname.getText();
                    clientname.setEditable(false);
                    
                    try{
                        theSocket = new Socket("10.71.91.219", 60000);
                        InputStreamReader streamreader = new InputStreamReader(theSocket.getInputStream());
                        theReader = new BufferedReader (streamreader);
                        theWriter = new PrintWriter(theSocket.getOutputStream());
                        theWriter.println(username + ": has connected :Connect");
                        theWriter.flush();
                        isConnected = true;
                        
                    }catch(Exception ex){
                        showArea.append("Cannot connect! Try Again. \n");
                        clientname.setEditable(true);
                    }
                    ListenThread();
                }
                else if(isConnected == true){
                    showArea.append("You are connected to the server. \n");
                }
        }
    }//GEN-LAST:event_connectActionPerformed

    private void disconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectActionPerformed
        // TODO add your handling code here:
        sendDisconnect();
        Disconnect();
    }//GEN-LAST:event_disconnectActionPerformed

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        // TODO add your handling code here:
        switch (typeArea.getText()){
            case "Your messages":
                typeArea.setText("Type your message here");
                typeArea.requestFocus();
            case "Client name":
                break;
            case "Input your name":
                break;
            default:
                try{
                    theWriter.println(username + " : " + typeArea.getText() + ":" + "Chat");
                    theWriter.flush();
                }catch(Exception ex){
                    showArea.append("You're not connected to the server! \n");
                }
                typeArea.setText("");
                typeArea.requestFocus();
        }
        typeArea.setText("Your messages");
        typeArea.requestFocus();
    }//GEN-LAST:event_sendActionPerformed

    private void typeAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeAreaActionPerformed
        // TODO add your handling code here:
        if(typeArea.getText().equals("Your messages")){
            typeArea.setText("");
        }
    }//GEN-LAST:event_typeAreaActionPerformed

    private void clientnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clientnameActionPerformed
        // TODO add your handling code here:
        if(clientname.getText().equals("Your Name")){
            clientname.setText("");
        }
    }//GEN-LAST:event_clientnameActionPerformed

    private void clientnameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clientnameKeyTyped
        // TODO add your handling code here:
        switch(clientname.getText()){
            case "Your Name":
                clientname.setText("");
                break;
            case "Input your name!":
                clientname.setText("");
            default:
        }
    }//GEN-LAST:event_clientnameKeyTyped

    private void clientnameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clientnameKeyReleased
        // TODO add your handling code here:
        switch (clientname.getText()){
            case "":
                
            default:
                String name = clientname.getText();
                String result = name.substring(0,1).toUpperCase() + name.substring(1);
                clientname.setText(result);
        }
    }//GEN-LAST:event_clientnameKeyReleased

    private void typeAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_typeAreaKeyReleased
        // TODO add your handling code here:
        switch(typeArea.getText()){
            
            default:
                String name = typeArea.getText();
                String result = name.substring(0,1).toUpperCase() + name.substring(1);
                typeArea.setText(result);
        }
    }//GEN-LAST:event_typeAreaKeyReleased

    private void takeOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_takeOrderActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int row = jTable1.getSelectedRow();
        String cell = jTable1.getModel().getValueAt(row, 4).toString();
        String sql = "DELETE FROM dataform WHERE Time = " + cell;
        if(jTable1.getSelectedRow()==-1){
            if(jTable1.getRowCount()==0){
                JOptionPane.showMessageDialog(null, "No order to be selected! ", "XMUMCarPick Driver Form", JOptionPane.OK_OPTION);
                
            }
            else{
                JOptionPane.showMessageDialog(null, "Select a order to take ", "XMUMCarPick Driver Form", JOptionPane.OK_OPTION);
                
            }
        }
        else{
            
            try{
                pst=con.prepareStatement(sql);
                pst.execute();
                JOptionPane.showMessageDialog(null, "Order Taken Successfully!");
                
            }catch(Exception ex){
                JOptionPane.showMessageDialog(null, ex);
            }finally{
                try{
                    pst.close();
                    rs.close();
                }catch (Exception ex){
                    
                }
            }
        }
        model.setRowCount(0);
        updateTable();
    }//GEN-LAST:event_takeOrderActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        /*mod.setRowCount(0);/*
        
        String sql = "INSERT INTO dataform(Name, Origin, Destination, Pax, Time, Date)VALUES(?,?,?,?,?,?)";
        
        try{
            pst = con.prepareStatement(sql);
            
            pst.setString(1, nameArea.getText());
            pst.setString(2, originArea.getText());
            pst.setString(3, destinationArea.getText());
            pst.setString(4, paxArea.getText());
            pst.setString(5, timeArea.getText());
            pst.setString(6, dateArea.getText());
            
            pst.execute();
            JOptionPane.showMessageDialog(null, "System Updated");
            rs.close();
            pst.close();
            
        }
        catch(HeadlessException | SQLException ex){
            JOptionPane.showMessageDialog(null, ex);
        }*/
            /*String sql = "DELETE FROM dataform";
            try{
                pst = con.prepareStatement(sql);
                pst.execute();
                JOptionPane.showMessageDialog(null, "System Updated");
                rs.close();
                pst.close();
            }catch(HeadlessException | SQLException ex){
                JOptionPane.showMessageDialog(null, ex);
            }*/
            
            model.setRowCount(0);
            updateTable();
            
            DefaultTableModel iModel = (DefaultTableModel) jTable1.getModel();
            if(jTable1.getSelectedRow()==-1){
                if(jTable1.getRowCount() == 0){
                    JOptionPane.showMessageDialog(null, "Dara Entry Update Confirmed!", "XMUMCarPick Form", JOptionPane.OK_OPTION);
                }
            }
    }//GEN-LAST:event_updateActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        // TODO add your handling code here:
        try{
            
            priceArea.setText(null);
            carSeatArea.setText(null);
            paxArea.setText(null);
            distanceArea.setText(null);
            timeArea.setText(null);
        }catch(Exception ex){
            
        }
    }//GEN-LAST:event_refreshActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        frame = new JFrame("Exit");
        new CarPickLogin().setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_exitActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void calculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calculateActionPerformed
        // TODO add your handling code here:
        double d = Double.parseDouble(distanceArea.getText());
        double p = Double.parseDouble(paxArea.getText());
        double c = Double.parseDouble(carSeatArea.getText());
        double t = Double.parseDouble(timeArea.getText());
        
        d = distanceCal(d);
        p = paxCal(p);
        c = carSeatCal(c);
        t = timeCal(t);
        double pr = d + p + c + t;
        priceArea.setText(""+pr);
        
    }//GEN-LAST:event_calculateActionPerformed

    private void completeOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeOrderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_completeOrderActionPerformed

    private void takeOrderKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_takeOrderKeyReleased
        // TODO add your handling code here:
        
    }//GEN-LAST:event_takeOrderKeyReleased

    private void completeOrderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_completeOrderMouseReleased
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Order Completed! ", "XMUMCarPick Driver Form", JOptionPane.OK_OPTION);
        takeOrder.setEnabled(true);
        completeOrder.setEnabled(false);
    }//GEN-LAST:event_completeOrderMouseReleased

    private void takeOrderMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_takeOrderMouseReleased
        // TODO add your handling code here:
        takeOrder.setEnabled(false);
        completeOrder.setEnabled(true);
    }//GEN-LAST:event_takeOrderMouseReleased
private JFrame frame;
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CarPickDriver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CarPickDriver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CarPickDriver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CarPickDriver.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CarPickDriver().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calculate;
    private javax.swing.JTextField carSeatArea;
    private javax.swing.JTextField clientname;
    private javax.swing.JButton completeOrder;
    private javax.swing.JButton connect;
    private javax.swing.JButton disconnect;
    private javax.swing.JTextField distanceArea;
    private javax.swing.JButton exit;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField paxArea;
    private javax.swing.JTextField priceArea;
    private javax.swing.JButton refresh;
    private javax.swing.JButton send;
    private javax.swing.JTextArea showArea;
    private javax.swing.JButton takeOrder;
    private javax.swing.JTextField timeArea;
    private javax.swing.JTextField typeArea;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables

    public class typeArea implements Runnable{
    @Override
    public void run(){
        String[] data;
        String stream;
        
        try{
            while(!(stream = theReader.readLine()).equals(null)){
                data = stream.split(":");
                
                switch(data[2]){
                    case "Chat":
                        showArea.append(data[0] + ":" + data[1] + "\n");
                        showArea.setCaretPosition(showArea.getDocument().getLength());
                        break;
                    case "Connect":
                        showArea.removeAll();
                        userAdd(data[0]);
                        break;
                    case "Disconnect":
                        userRemove(data[0]);
                        break;
                    case "Done":
                        writeUsers();
                        userss.clear();
                }
            }
        }
            catch (Exception ex){
                    
                    }
        }
    }
}

